{\rtf1\ansi\ansicpg1252\cocoartf2577
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet\
\
This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.\
\
In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.\
\
For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.\
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.\
\
Part 1: Yelp Dataset Profiling and Understanding\
\
1. Profile the data by finding the total number of records for each of the tables below:\
\
	Answers:\
	i. Attribute table = 10000\
	ii. Business table = 10000\
	iii. Category table = 10000\
	iv. Checkin table = 10000\
	v. elite_years table = 10000\
	vi. friend table = 10000\
	vii. hours table = 10000\
	viii. photo table = 10000\
	ix. review table = 10000\
	x. tip table = 10000\
	xi. user table = 10000\
\
	Code:\
	SELECT * FROM attribute\
	SELECT * FROM business\
	SELECT * FROM category\
	SELECT * FROM checkin\
	SELECT * FROM elite_years\
	SELECT * FROM friend\
	SELECT * FROM hours\
	SELECT * FROM photo\
	SELECT * FROM review\
	SELECT * FROM tip\
	SELECT * FROM user\
\
2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.\
\
	Answers:\
	i. Business = 10000		(id)\
	ii. Hours = 1562		(business_id)\
	iii. Category = 2643	(business_id)\
	iv. Attribute = 1115	(business_id)\
	v. Review = 10000		(id)\
	vi. Checkin = 493		(business_id)\
	vii. Photo = 10000		(id)\
	viii. Tip = 537			(user_id)\
	ix. User = 10000		(id)\
	x. Friend = 11			(user_id)\
	xi. Elite_years = 2780	(user_id)\
\
	Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	\
\
	Code:\
	SELECT COUNT(DISTINCT id) FROM business\
	SELECT COUNT(DISTINCT business_id) FROM hours\
	SELECT COUNT(DISTINCT business_id) FROM category\
	SELECT COUNT(DISTINCT business_id) FROM attribute\
	SELECT COUNT(DISTINCT id) FROM review\
	SELECT COUNT(DISTINCT business_id) FROM checkin\
	SELECT COUNT(DISTINCT id) FROM photo\
	SELECT COUNT(DISTINCT user_id) FROM tip\
	SELECT COUNT(DISTINCT id) FROM user\
	SELECT COUNT(DISTINCT user_id) FROM friend\
	SELECT COUNT(DISTINCT user_id) FROM elite_years\
\
3. Are there any columns with null values in the Users table? Indicate "yes," or "no."\
	\
	Answer: No\
	\
	Code:\
	SELECT COUNT(*)\
	FROM user\
	WHERE id IS NULL\
		OR name IS NULL\
		OR review_count IS NULL\
		OR yelping_since IS NULL\
		OR useful IS NULL\
		OR funny IS NULL\
		OR cool IS NULL\
		OR fans IS NULL\
		OR average_stars IS NULL\
		OR compliment_hot IS NULL\
		OR compliment_more IS NULL\
		OR compliment_profile IS NULL\
		OR compliment_cute IS NULL\
		OR compliment_list IS NULL\
		OR compliment_note IS NULL\
		OR compliment_plain IS NULL\
		OR compliment_cool IS NULL\
		OR compliment_funny IS NULL\
		OR compliment_writer IS NULL\
		OR compliment_photos IS NULL\
\
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:\
\
	i. Table: Review, Column: Stars\
		min: 1\
		max: 5\
		avg: 3.7082\
	\
	Code:\
	SELECT MIN(stars) AS minimum, MAX(stars) AS maximum, AVG(stars) as average\
	FROM review\
	\
	ii. Table: Business, Column: Stars\
		min: 1.0\
		max: 5.0\
		avg: 3.6549\
	\
	Code:\
	SELECT MIN(stars) AS minimum, MAX(stars) AS maximum, AVG(stars) as average\
	FROM business\
	\
	iii. Table: Tip, Column: Likes\
		min: 0\
		max: 2\
		avg: 0.0144\
	\
	Code:\
	SELECT MIN(likes) AS minimum, MAX(likes) AS maximum, AVG(likes) as average\
	FROM tip\
	\
	iv. Table: Checkin, Column: Count\
		min: 1\
		max: 53\
		avg: 1.9414\
	\
	Code:\
	SELECT MIN(count) AS minimum, MAX(count) AS maximum, AVG(count) as average\
	FROM checkin\
	\
	v. Table: User, Column: Review_count\
		min: 0\
		max: 2000\
		avg: 24.2995\
	\
	Code:\
	SELECT MIN(review_count) AS minimum, MAX(review_count) AS maximum, AVG(review_count) as average\
	FROM user\
\
5. List the cities with the most reviews in descending order:\
	\
	Code:\
	SELECT city, SUM(review_count) AS numreviews\
	FROM business\
	GROUP BY city\
	ORDER BY numreviews DESC\
\
	Copy and Paste the Result Below:\
	+-----------------+------------+\
	| city            | numreviews |\
	+-----------------+------------+\
	| Las Vegas       |      82854 |\
	| Phoenix         |      34503 |\
	| Toronto         |      24113 |\
	| Scottsdale      |      20614 |\
	| Charlotte       |      12523 |\
	| Henderson       |      10871 |\
	| Tempe           |      10504 |\
	| Pittsburgh      |       9798 |\
	| Montr\'c3\'a9al        |       9448 |\
	| Chandler        |       8112 |\
	| Mesa            |       6875 |\
	| Gilbert         |       6380 |\
	| Cleveland       |       5593 |\
	| Madison         |       5265 |\
	| Glendale        |       4406 |\
	| Mississauga     |       3814 |\
	| Edinburgh       |       2792 |\
	| Peoria          |       2624 |\
	| North Las Vegas |       2438 |\
	| Markham         |       2352 |\
	| Champaign       |       2029 |\
	| Stuttgart       |       1849 |\
	| Surprise        |       1520 |\
	| Lakewood        |       1465 |\
	| Goodyear        |       1155 |\
	+-----------------+------------+\
\
6. Find the distribution of star ratings to the business in the following cities:\
\
	i. Avon\
\
	Code:\
	SELECT stars, SUM(review_count) AS totalreviews\
	FROM business\
	WHERE city = 'Avon'\
	GROUP BY stars\
\
	Copy and Paste the Resulting Table Below (2 columns \'c3\'a2\'e2\'82\'ac\'e2\'80\'9c star rating and count):\
	+-------+--------------+\
	| stars | totalreviews |\
	+-------+--------------+\
	|   1.5 |           10 |\
	|   2.5 |            6 |\
	|   3.5 |           88 |\
	|   4.0 |           21 |\
	|   4.5 |           31 |\
	|   5.0 |            3 |\
	+-------+--------------+\
\
7. Find the top 3 users based on their total number of reviews:\
		\
	SQL code used to arrive at answer:\
	SELECT name, review_count\
	FROM user\
	GROUP BY name\
	ORDER BY review_count DESC\
		\
	Copy and Paste the Result Below:\
	+------------+--------------+\
	| name       | review_count |\
	+------------+--------------+\
	| Gerald     |         2000 |\
	| .Hon       |         1246 |\
	| eric       |         1116 |\
	| Roanna     |         1039 |\
	| Dominic    |          836 |\
	| Lissa      |          834 |\
	| Alison     |          775 |\
	| Sui        |          754 |\
	| Crissy     |          676 |\
	| Joc        |          652 |\
	| Susanna    |          639 |\
	| Karl       |          512 |\
	| Quisha     |          481 |\
	| Fancypants |          472 |\
	| Pinky      |          449 |\
	| teena      |          444 |\
	| Britt      |          426 |\
	| Hanna      |          422 |\
	| Wesh       |          419 |\
	| Marco      |          403 |\
	| kathleen   |          402 |\
	| Kiristen   |          400 |\
	| Alias      |          379 |\
	| Princeton  |          376 |\
	| Renee      |          364 |\
	+------------+--------------+\
\
8. Does posing more reviews correlate with more fans?\
\
	Please explain your findings and interpretation of the results:\
	-Not really, the individuals with the most reviews dont have the most fans\
	-Amy has the most fans, but has 503 reviews compared to Gerald (2000)\
	-Gerald has the most reviews, but only 253 fans\
	\
	SELECT name, review_count, fans\
	FROM user\
	ORDER BY fans DESC\
	+-----------+--------------+------+\
	| name      | review_count | fans |\
	+-----------+--------------+------+\
	| Amy       |          609 |  503 |\
	| Mimi      |          968 |  497 |\
	| Harald    |         1153 |  311 |\
	| Gerald    |         2000 |  253 |\
	| Christine |          930 |  173 |\
	| Lisa      |          813 |  159 |\
	| Cat       |          377 |  133 |\
	| William   |         1215 |  126 |\
	| Fran      |          862 |  124 |\
	| Lissa     |          834 |  120 |\
	| Mark      |          861 |  115 |\
	| Tiffany   |          408 |  111 |\
	| bernice   |          255 |  105 |\
	| Roanna    |         1039 |  104 |\
	| Angela    |          694 |  101 |\
	| .Hon      |         1246 |  101 |\
	| Ben       |          307 |   96 |\
	| Linda     |          584 |   89 |\
	| Christina |          842 |   85 |\
	| Jessica   |          220 |   84 |\
	| Greg      |          408 |   81 |\
	| Nieves    |          178 |   80 |\
	| Sui       |          754 |   78 |\
	| Yuri      |         1339 |   76 |\
	| Nicole    |          161 |   73 |\
	+-----------+--------------+------+\
	\
	SELECT name, review_count, fans\
	FROM user\
	ORDER BY review_count DESC\
	+-----------+--------------+------+\
	| name      | review_count | fans |\
	+-----------+--------------+------+\
	| Gerald    |         2000 |  253 |\
	| Sara      |         1629 |   50 |\
	| Yuri      |         1339 |   76 |\
	| .Hon      |         1246 |  101 |\
	| William   |         1215 |  126 |\
	| Harald    |         1153 |  311 |\
	| eric      |         1116 |   16 |\
	| Roanna    |         1039 |  104 |\
	| Mimi      |          968 |  497 |\
	| Christine |          930 |  173 |\
	| Ed        |          904 |   38 |\
	| Nicole    |          864 |   43 |\
	| Fran      |          862 |  124 |\
	| Mark      |          861 |  115 |\
	| Christina |          842 |   85 |\
	| Dominic   |          836 |   37 |\
	| Lissa     |          834 |  120 |\
	| Lisa      |          813 |  159 |\
	| Alison    |          775 |   61 |\
	| Sui       |          754 |   78 |\
	| Tim       |          702 |   35 |\
	| L         |          696 |   10 |\
	| Angela    |          694 |  101 |\
	| Crissy    |          676 |   25 |\
	| Lyn       |          675 |   45 |\
	+-----------+--------------+------+\
\
9. Are there more reviews with the word "love" or with the word "hate" in them?\
\
	Answer:  Yes, "love" has 1780 reviews where "hate" has 232 reviews\
	\
	SQL code used to arrive at answer:\
	SELECT COUNT(text)\
	FROM review\
	WHERE text LIKE '%love%'\
\
	SELECT COUNT(text)\
	FROM review\
	WHERE text LIKE '%hate%'\
\
10. Find the top 10 users with the most fans:\
\
	SQL code used to arrive at answer:\
	SELECT name, fans\
	FROM user\
	ORDER BY fans DESC\
	\
	Copy and Paste the Result Below:\
	+-----------+------+\
	| name      | fans |\
	+-----------+------+\
	| Amy       |  503 |\
	| Mimi      |  497 |\
	| Harald    |  311 |\
	| Gerald    |  253 |\
	| Christine |  173 |\
	| Lisa      |  159 |\
	| Cat       |  133 |\
	| William   |  126 |\
	| Fran      |  124 |\
	| Lissa     |  120 |\
	+-----------+------+\
\
**********************************************************************************************************\
\
Part 2: Inferences and Analysis\
\
1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.\
	\
	Selected Toronto and Bars\
	\
	i. Do the two groups you chose to analyze have a different distribution of hours?\
	Yes, the higher rated bars open later (11:00 and 16:00 vs 10:00)\
\
	ii. Do the two groups you chose to analyze have a different number of reviews?\
	Yes, they range from 10 to 35 reviews.  Lowest rated bar has the most at 35\
			 \
	iii. Are you able to infer anything from the location data provided between these two groups? Explain.\
	Yes, the higher rated bars are both from postal code "M6* ***"\
\
	SQL code used for analysis:\
	SELECT b.name, b.city, c.category, b.stars, h.hours, b.review_count, b.address, b.postal_code\
	FROM (business b \
		INNER JOIN category c ON b.id = c.business_id)\
		INNER JOIN hours h ON h.business_id = b.id\
	WHERE b.city = 'Toronto' AND c.category = "Bars"\
	GROUP BY b.stars;\
		\
		\
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.\
		\
	i. Difference 1:\
	There is 1 closed bar, and it has the least amount of reviews (10)\
			 \
	ii. Difference 2:\
	The 3 open bars all open earlier than the closed bar\
	The closed bar is the only bar in postal code "M5* ***"\
			 \
	SQL code used for analysis:\
	SELECT b.is_open, c.category, b.stars, h.hours, b.review_count, b.address, b.postal_code\
	FROM (business b \
		INNER JOIN category c ON b.id = c.business_id)\
		INNER JOIN hours h ON h.business_id = b.id\
	WHERE b.city = 'Toronto' AND c.category = "Bars"\
	GROUP BY b.stars;\
\
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.\
\
Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:\
	\
	i. Indicate the type of analysis you chose to do:\
	I want to find out if there is any correlation of useful and funny reviews based on first character of their name and how that relates to their stars rating\
\
	ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:\
	I need to grab the useful and funny columns from the user table and aggregate those columns by mean, excluding the names that dont have many responses (arbitrarily 50).  Need to LEFT JOIN to tip and review tables to check the likes average and stars average.  Then created a useful/funny ratio to compare to the average number of stars\
	Everyone has a higher usefulness compared to funny (oddly).  There isnt much correlation between the useful/funny ratio to their stars average.  I was thinking that people who wrote more funny things would have a higher average stars rating.\
\
	iii. Output of your finished dataset:\
	+-----------+----------+---------------+---------------+----------+---------------+------------------+\
	| namegroup | numnames |     usefulavg |      funnyavg | likesavg |      starsavg | usefulfunnyratio |\
	+-----------+----------+---------------+---------------+----------+---------------+------------------+\
	| A         |      866 | 27.4480369515 | 16.1812933025 |     None | 4.11111111111 |    1.69628202384 |\
	| B         |      471 | 14.3757961783 | 6.27600849257 |      0.0 |          3.25 |    2.29059539919 |\
	| C         |      745 | 24.8872483221 | 14.4214765101 |     None |           3.0 |    1.72570737156 |\
	| D         |      595 | 15.1159663866 | 5.55630252101 |     None |           3.0 |    2.72050816697 |\
	| E         |      343 | 14.6997084548 | 2.86297376093 |     None |           5.0 |    5.13441955193 |\
	| F         |       91 | 146.549450549 | 116.461538462 |     None |           5.0 |    1.25835063219 |\
	| G         |      213 | 99.8028169014 | 21.0093896714 |     None | 2.33333333333 |    4.75039106145 |\
	| H         |      144 | 864.805555556 | 856.534722222 |     None |           5.0 |    1.00965615651 |\
	| I         |       62 | 11.3870967742 | 3.43548387097 |     None |          None |    3.31455399061 |\
	| J         |     1216 | 19.8157894737 | 11.0485197368 |      0.0 | 3.55555555556 |    1.79352437663 |\
	| K         |      692 | 21.0447976879 | 4.56936416185 |      0.0 |          4.75 |    4.60562934851 |\
	| L         |      545 | 19.4366972477 | 8.41651376147 |     None | 2.66666666667 |    2.30935251799 |\
	| M         |     1023 | 22.8602150538 | 7.15053763441 |     None | 3.66666666667 |     3.1969924812 |\
	| N         |      288 | 15.8159722222 | 6.02430555556 |     None |          3.25 |    2.62536023055 |\
	| P         |      248 | 27.4717741935 | 14.9758064516 |     None |           4.0 |    1.83441033926 |\
	| R         |      581 | 21.4922547332 | 8.73838209983 |     None |           3.0 |    2.45952334056 |\
	| S         |      847 |  33.160566706 | 13.1499409681 |      0.0 |         2.875 |    2.52172741964 |\
	| T         |      486 |  16.378600823 | 7.14403292181 |     None |          3.25 |    2.29262672811 |\
	| V         |      146 | 10.2534246575 | 6.00684931507 |     None |           2.0 |    1.70695553022 |\
	| W         |      108 | 164.342592593 | 147.481481481 |     None |          None |    1.11432697137 |\
	+-----------+----------+---------------+---------------+----------+---------------+------------------+\
\
	iv. Provide the SQL code you used to create your final dataset:\
	SELECT\
		SUBSTR(name,1,1) AS namegroup,\
		COUNT(name) AS numnames,\
		AVG(u.useful) AS usefulavg,\
		AVG(u.funny) AS funnyavg,\
		AVG(t.likes) AS likesavg,\
		AVG(r.stars) AS starsavg,\
		AVG(u.useful) / AVG(u.funny) AS usefulfunnyratio\
	FROM user u \
		LEFT JOIN tip t ON u.id = t.user_id\
		LEFT JOIN review r ON u.id = r.id\
	GROUP BY namegroup\
	HAVING COUNT(*) > 50\
	ORDER BY namegroup;\
}